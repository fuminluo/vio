RESTful 接口命名规范
  1.基础规则
  http(s)://server.com/app-name/{version}/{domain}/{rest-convention}
  {version}代表api的版本信息。
  {domain}是一个你可以用来定义任何技术的区域,例如：安全-允许指定的用户可以访问这个区域,或者业务上的原因。例如：同样的功能在同一个前缀之下。

3 URL命名
URL用于标识资源，因此URL应该以名词进行命名，例如/users, /users/children等。
一般URL会内嵌参数，例如要获取id为313的user的信息，那么URL应该为/users/313，
前面的user采用复数，如果要列出其所有后代，则URL应为/users/313/children，children为复数形式，
如果要获取其id为499的后代，则URL应为/users/313/children/499

4 消息实体
消息实体，就是请求和响应消息中的entity-body（也称为body），消息实体采用JSON字符串格式。

5 请求
5.1 方法
使用HTTP标准定义的请求方法。
5.1.1 get
获取资源，单个参数一般写在URL上，多个参数则作为query parameter附在URL后面，例如：
    单个参数：/user/123, 表示id为123的user
    多个参数：/user?name=tom&phone=13787890987&gender=male
    get方法应为幂等的，并且不对数据记录产生影响。对于汉字与特殊字符，应该进行urlencode。

5.1.2 post
创建资源，请求的headers里设置Content-type为application/json，参数为json类型。
根据约定，在创建成功之后，返回的状态码应该是201（Created），并且在response的Header里设置Location为新创建的资源的URL，
例如，创建了一个新的user，该user创建后id为888，那么Header里应该设置Location为/users/888，当然，这应该是一个完整的URL，
这里只是给出了一个相对路径的URI以作为说明。返回了这些数据后，客户端可以自定义后续行为，或者查看创建后的user，或者刷新当前的user列表，这些行为服务端并不关心。
如果重复提交了相同的数据，第一次应该返回201，以后则应返回409（Conflict），并且在response的Header里设置Location指向已经存在的资源，说明冲突的来源。

5.1.3 put
更新资源，对现有资源进行修改，请求的headers与post一样，参数也是。此方法应该是幂等的。

5.1.4 delete
删除资源。此方法应是幂等的。

5.2 Header
Content-type应设为application/json
另外应设置一个version，指明所使用的接口版本。这不属于HTTP协议中的一部分，是自定义的，出于版本控制的考量，具体见第七章。

5.3 body
采用JSON字符串，具体的结构有待商定，这不属于HTTP协议的一部分，是自定义的。
这里主要放置业务相关的数据。

6 响应
6.1 Header
根据响应的状态码不同，相应地设置头部，具体见下一节。
但是在我所了解的公司里，做法都是统一返回200，然后在返回的JSON字符串里设置消息码。我是不能理解的。
据一位前端同学说，前端代码接收到了请求以后，不方便获取Http状态码。其实我也写过前端，不深入，
但是一些基本的知识还是有的，我觉得这并不难做到，估计是他的代码封装的时候没有考虑到这一点，现在要改比较麻烦，所以不想大动干戈、伤筋动骨。

6.2 状态码
状态码 	语义 	使用场景
200 	OK 	正常返回消息，什么问题也没有
201 	Created 	创建资源成功，Header里应设置Location指向新创建的资源
202 	Accepted 	请求已被接收，但是处理过程较长，不能马上返回结果
304 	Not Modified 	没有任何修改发生
401 	Unauthorized 	缺乏权限，指已经登录但是缺乏请求这个资源的权限
403 	Forbidden 	拒绝访问，可用于未登录时拦截返回的状态码，此时Header里应设置Location为登录页面的URL
404 	Not Found 	不存在所请求的资源
406 	Not Acceptable 	请求没有被接收，参数约束校验不通过，或者其他业务类型的错误都可以返回这个状态码，response的body里应有表示错误信息的JSON实体。
409 	Conflict 	请求的资源有冲突，例如多次提交一样的创建请求，response的Header里应设置Location为产生冲突的资源的URL
500 	Internal Server Error 	服务器的非业务类错误，response的body里应有表示错误信息的JSON实。

6.3 body采用JSON字符串。
JSON的结构分为两种：成功、失败。
一般而言，只有返回200的时候才需要读取成功的JSON，只有返回406和500的时候才需要读取失败的JSON，对于其他的状态码，客户端不需要服务器提供额外的消息。

7 版本控制
考虑到接口有可能升级，升级的类型有几种：

    新增功能接口
    原有接口返回数据增加字段
    现有接口返回数据变更现有字段格式或删除现有字段
    现有接口变更业务逻辑
    删除接口
其中，前两种升级并不会影响客户端，因此毋需处理。而后面三种会导致使用旧接口的客户端不能正常工作。
一般服务端升级与客户端升级都不是同步的，客户端升级往往会滞后，因此在服务端升级后应该保留旧版本的接口继续运行一段时间，让未升级的客户端可以继续工作一段时间，同时可以上线新版本的客户端。过一段时间后再将旧版本的接口下线。
而版本控制应该是向下兼容的，即假设当前版本是1.2，如果客户端请求1.3版本的服务，应当用当前版本提供服务。如果没有注明请求的版本号，应当提供当前版本的服务。
一般情况下，客户端请求需要带版本号，但是服务端并不需要对此进行处理，除非是同时运行新旧版本的同一个接口，才需要做差异处理。

原文地址：https://blog.csdn.net/Gordon212/article/details/76559801